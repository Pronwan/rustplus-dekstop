<Window x:Class="RustPlusDesk.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:conv="clr-namespace:RustPlusDesk.Converters"
        xmlns:views="clr-namespace:RustPlusDesk.Views"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Rust+ Desktop by Pronwan" Height="814" Width="1245"
        Background="{DynamicResource AppBg}" Foreground="{DynamicResource TextPrimary}"
        UseLayoutRounding="True" SnapsToDevicePixels="True">
    <Window.Resources>

        <!-- Palette -->
        <SolidColorBrush x:Key="AppBg"         Color="#121417"/>
        <SolidColorBrush x:Key="Surface"       Color="#1C1F24"/>
        <SolidColorBrush x:Key="SurfaceAlt"    Color="#23272E"/>
        <SolidColorBrush x:Key="CardBorder"    Color="#33414850"/>
        <SolidColorBrush x:Key="Accent"        Color="#4FC3F7"/>
        <SolidColorBrush x:Key="AccentDark"    Color="#FF1E576F"/>

        <SolidColorBrush x:Key="TextPrimary"   Color="#ECEFF1"/>
        <SolidColorBrush x:Key="TextSubtle"    Color="#B0BEC5"/>
        <CornerRadius    x:Key="Radius">10</CornerRadius>

        <!-- Default-Text -->
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
        </Style>
        <SolidColorBrush x:Key="CbBg"       Color="#202428"/>
        <SolidColorBrush x:Key="CbBorder"   Color="#5A6672"/>
        <SolidColorBrush x:Key="CbHover"    Color="#7F8A96"/>
        <SolidColorBrush x:Key="CbAccent"   Color="#62D38B"/>
        <SolidColorBrush x:Key="CbDisabled" Color="#334049"/>
        <SolidColorBrush x:Key="CbText"     Color="#EAEFF3"/>

        <SolidColorBrush x:Key="DonateYellow"        Color="#FFD166"/>
        <SolidColorBrush x:Key="DonateYellowHover"   Color="#FFDE89"/>
        <SolidColorBrush x:Key="DonateYellowPressed" Color="#FFBE4C"/>
        <SolidColorBrush x:Key="DonateTextDark"      Color="#1A1E22"/>

        <!-- Runde gelbe Accent-Button -->
        <Style x:Key="DonateButton" TargetType="Button">
            <Setter Property="Foreground"      Value="{StaticResource DonateTextDark}"/>
            <Setter Property="Background"      Value="{StaticResource DonateYellow}"/>
            <Setter Property="BorderBrush"     Value="#26000000"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding"         Value="10,6"/>
            <Setter Property="Cursor"          Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Bd"
                CornerRadius="10"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True">
                            <ContentPresenter HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource DonateYellowHover}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource DonateYellowPressed}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Opacity" Value="0.6"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 🔘 Runde Checkbox mit Punkt -->
        <Style x:Key="DotCheckBox" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{StaticResource CbText}"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Grid SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <!-- Bullet -->
                            <Grid Width="18" Height="18" Margin="0,0,8,0">
                                <!-- Rahmen-Kreis -->
                                <Ellipse x:Name="Circle"
                     Width="18" Height="18"
                     Stroke="{StaticResource CbBorder}"
                     StrokeThickness="2"
                     Fill="Transparent"/>
                                <!-- Punkt -->
                                <Ellipse x:Name="Dot"
                     Width="10" Height="10"
                     Fill="{StaticResource CbAccent}">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform x:Name="DotScale" ScaleX="0" ScaleY="0" CenterX="5" CenterY="5"/>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Grid>

                            <!-- Text/Content -->
                            <ContentPresenter Grid.Column="1"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>

                            <!-- Visual States -->
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                                  Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                                  To="#7F8A96" Duration="0:0:0.08"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                                  Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                                  To="#334049" Duration="0:0:0"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                   Storyboard.TargetProperty="ScaleX" To="0" Duration="0:0:0"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                   Storyboard.TargetProperty="ScaleY" To="0" Duration="0:0:0"/>
                                            <DoubleAnimation Storyboard.TargetName="Circle"
                                   Storyboard.TargetProperty="Opacity" To="0.6" Duration="0:0:0"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>

                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                                  Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                                  To="#62D38B" Duration="0:0:0.08"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                   Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.10"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                   Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.10"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                                  Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                                  To="#62D38B" Duration="0:0:0.08"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                   Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.10"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                   Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.10"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Button: rund, dezent Hover/Pressed -->
        <Style TargetType="Button">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="8,6"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource Radius}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Surface}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentDark}"/>
                                <Setter Property="Foreground" Value="White"/>
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentDark}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Icon-Button (z.B. Lupe) -->
        <Style x:Key="IconButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Padding" Value="6"/>
            <Setter Property="Width" Value="32"/>
            <Setter Property="Height" Value="32"/>
        </Style>

        <!-- CheckBox dunkel -->
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
        </Style>

        <!-- TextBox dunkel -->
        <Style TargetType="TextBox">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="6,4"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource Radius}">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Accent}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- ListBox dunkel + dezente Auswahl -->
        <Style TargetType="ListBox">
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style>
        <Style TargetType="ListBoxItem">
            <Setter Property="Padding" Value="6,4"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border x:Name="Bd" CornerRadius="6" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="4,2"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="#264FC3F7"/>
                                <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="#1AFFFFFF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Log/TextBox Multiline -->
        <Style TargetType="{x:Type ScrollViewer}">
            <Setter Property="Background" Value="Transparent"/>
        </Style>

        <!-- Card-Container zum Wiederverwenden -->
        <Style x:Key="Card" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource Surface}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="{DynamicResource Radius}"/>
            <Setter Property="Padding" Value="12"/>
        </Style>

        <!-- Abschnittstitel -->
        <Style x:Key="SectionTitle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Margin" Value="0,0,0,8"/>
        </Style>

        <conv:BoolToVisibilityConverter x:Key="BoolToVisibility"/>
        <conv:NotNullToBoolConverter   x:Key="NotNull"/>
    </Window.Resources>

    <Grid x:Name="Root" Margin="16">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="3*"/>
        </Grid.ColumnDefinitions>

        <!-- Linke Spalte: Account + Serverliste -->
        <Border Grid.Column="0" Style="{StaticResource Card}" Margin="0,0,12,0">
        <StackPanel Grid.Column="0">
                <TextBlock Text="Account" Foreground="White" FontWeight="Bold" FontSize="16" Margin="0,0,0,8"/>

            <StackPanel Orientation="Horizontal">
                <Button x:Name="BtnSteamLogin"
            Content="Login with Steam"
            Width="180"
            Click="BtnSteamLogin_Click"
            Margin="0,0,8,0"/>
                <TextBlock Text="SteamID64:" VerticalAlignment="Center" Margin="0,0,6,0"/>
                <TextBlock x:Name="TxtSteamId" VerticalAlignment="Center" FontWeight="SemiBold"/>
                <!-- Avatar -->
                <Image x:Name="ImgSteam" Width="24" Height="24" Margin="8,0,0,0"
           Stretch="UniformToFill" Visibility="Collapsed"/>
            </StackPanel>

            <Separator Margin="0,8,0,8"/>

                <TextBlock Text="Server" Foreground="White" FontWeight="Bold" FontSize="16" Margin="0,0,0,8"/>
            <ListBox x:Name="ListServers"
         ItemsSource="{Binding Servers}"
         SelectedItem="{Binding Selected, Mode=TwoWay}"
         DisplayMemberPath="Name"
                     Foreground="White"
         Height="116"
         SelectionChanged="ListServers_SelectionChanged">

                <ListBox.Resources>
                        <ContextMenu x:Key="ServerCtx" Foreground="White">
                        <!-- Der Trick: den aktuellen Server ins Tag binden -->
                        <MenuItem Header="Server löschen…"
                                  Foreground="Black"
                Click="Server_Delete_Click"
                Tag="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
                    </ContextMenu>
                </ListBox.Resources>

                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="ContextMenu" Value="{StaticResource ServerCtx}"/>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>

            <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                <Button Content="Listen (Pairing)" Width="150" Click="BtnListenPairing_Click" IsEnabled="{Binding CanStartPairing}" Margin="0,0,8,0"/>
                <TextBlock x:Name="TxtPairingState" VerticalAlignment="Center" Text="Pairing: idle" Margin="0,0,30,0"/>
                <Button Content="Connect"
                        Width="100"
                        Click="BtnConnect_Click"
                        Margin="0,0,8,0"
                        
                        Background="{DynamicResource AccentDark}" BorderBrush="{DynamicResource Accent}"/>

            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="0,8,0,0">

            </StackPanel>
            <TextBlock Margin="0,8,0,0"
                       Text="Note: To add new server, simply click Listen (Pairing) and pair ingame."
                       FontStyle="Italic"/>
            <!-- <Button Content="Rust+ Link einfügen…" Width="200" Margin="0,8,0,0" Click="BtnPasteRustPlusLink_Click"/> -->

            <Separator Margin="0,12,0,12"/>
            <TextBlock Text="Devices (paired)" FontWeight="Bold" FontSize="16" Margin="0,0,0,8"/>

            <ListBox x:Name="ListDevices"
         ItemsSource="{Binding CurrentDevices}"
         SelectedItem="{Binding SelectedDevice, Mode=TwoWay}"
         Height="336">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <!-- Dreispaltiges Grid -->
                        <Grid Margin="0,2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="220" />
                                <!-- Spalte 1: Display (Name+ID+Status) -->
                                <ColumnDefinition Width="125" />
                                <!-- Spalte 2: Alias (benutzerdefiniert) -->
                                <ColumnDefinition Width="80" />
                                <!-- Spalte 3: Toggle -->
                            </Grid.ColumnDefinitions>

                            <!-- Zeilenweite „missing“-Optik -->
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                            <Setter Property="Opacity" Value="0.6"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>

                            <!-- Spalte 1: Display -->
                            <TextBlock Grid.Column="0"
                   Text="{Binding Display}"
                                       Foreground="White"
                   VerticalAlignment="Center" Cursor="">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                                <Setter Property="Foreground" Value="Red"/>
                                                <Setter Property="FontStyle" Value="Italic"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <!-- Spalte 2: Alias (per Rechtsklick umbenennbar) -->
                            <TextBlock Grid.Column="1"
                   VerticalAlignment="Center"
                   ToolTip="Rechtsklick zum Umbenennen">
                                <TextBlock.Text>
                                    <Binding Path="Alias" TargetNullValue="(no custom name)"/>
                                </TextBlock.Text>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                                <Setter Property="Foreground" Value="Red"/>
                                                <Setter Property="FontStyle" Value="Italic"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <TextBlock.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Gerät umbenennen…"
                        Click="Device_Rename_Click"/>
                                    </ContextMenu>
                                </TextBlock.ContextMenu>
                            </TextBlock>

                            <!-- Spalte 3: Toggle (unverändert) -->
                            <ToggleButton Grid.Column="2"
              x:Name="Tog"
              Width="64" Height="26" Margin="8,0,0,0"
              IsChecked="{Binding IsOn, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <!-- Template sorgt dafür, dass Background/Content aus dem Style sichtbar sind -->
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="ToggleButton">
                                                    <Border x:Name="Bd"
                    Background="{TemplateBinding Background}"
                    CornerRadius="13"
                    BorderBrush="#66000000"
                    BorderThickness="1"
                    Padding="4">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter TargetName="Bd" Property="Opacity" Value="0.4"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>

                                        <!-- Event-Handler gehören auf Style-Ebene (nicht in Style.Triggers) -->
                                        <EventSetter Event="Checked"   Handler="DeviceToggle_Checked"/>
                                        <EventSetter Event="Unchecked" Handler="DeviceToggle_Unchecked"/>

                                        <!-- Defaults -->
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="Background" Value="IndianRed"/>
                                        <Setter Property="Content" Value="OFF"/>
                                        <Setter Property="FontWeight" Value="SemiBold"/>
                                        <Setter Property="Cursor" Value="Hand"/>
                                        <!-- Optional, falls ein Theme weiter reinfunkt -->
                                        <!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->

                                        <!-- Trigger -->
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Kind}" Value="SmartSwitch">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding IsMissing}" Value="True">
                                                <Setter Property="IsEnabled" Value="False"/>
                                                <Setter Property="Opacity" Value="0.4"/>
                                            </DataTrigger>

                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="Background" Value="SeaGreen"/>
                                                <Setter Property="Content" Value="ON"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>

            <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                    <Button x:Name="BtnDonate"
            Style="{StaticResource DonateButton}"
                           
            Click="BtnDonate_Click"
            ToolTip="Support (Opens in Browser)"
            Margin="0,0,10,0">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="❤" Foreground="Red" FontSize="14" Margin="2,0,6,0"/>
                            <TextBlock Text="Donate" Foreground="Red" Margin="2,0,6,0"/>
                        </StackPanel>
                    </Button>
                    <Button Content="Info"
        Width="80"
        Click="BtnDeviceInfo_Click"
        IsEnabled="{Binding ElementName=ListDevices, Path=SelectedItem, Converter={StaticResource NotNull}}"/>
                <Button Content="Refresh" Width="80" Margin="10,0,0,0" Click="BtnDeviceRefresh_Click"/>
                <Button Content="Delete" Width="80" Margin="10,0,0,0" Click="BtnDeleteDevice_Click"
          ToolTip="You can delete only missing devices"
          IsEnabled="{Binding ElementName=ListDevices, Path=SelectedItem.IsMissing, Converter={StaticResource NotNull}}"/>
                    <Button Content="CHAT" Width="80" Margin="10,0,0,0" Click="BtnOpenChat_Click" Background="{DynamicResource AccentDark}" BorderBrush="{DynamicResource Accent}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,6,0,0">
                <TextBlock Text="Players:"/>
                <TextBlock Text="{Binding ServerPlayers}" FontWeight="SemiBold" Margin="4,0,0,0"/>
                <TextBlock Text="  |  Queue:" Margin="6,0,0,0"/>
                <TextBlock Text="{Binding ServerQueue}" FontWeight="SemiBold" Margin="4,0,0,0"/>
                <TextBlock Text="  |  Server Time:" Margin="6,0,0,0"/>
                <TextBlock Text="{Binding ServerTime}" FontWeight="SemiBold" Margin="4,0,0,0"/>
                
            </StackPanel>
        </StackPanel>
        </Border>

        <!-- Rechte Spalte: Login/Status + WebViewHost -->
        <Border Grid.Column="1" Style="{StaticResource Card}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="100"/>
                </Grid.RowDefinitions>

                <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,8">
                    <TextBlock Text="Map Controls" Style="{StaticResource SectionTitle}" Margin="0,5,8,0"/>
                    <CheckBox Style="{StaticResource DotCheckBox}" x:Name="ChkGrid"  Content="Grid"  Margin="8,0,0,0"
                      Checked="ChkGrid_Checked" Unchecked="ChkGrid_Checked"/>
                    <CheckBox Style="{StaticResource DotCheckBox}" x:Name="ChkPlayers"
                              
Content="Players"
                               IsChecked="True"
Margin="12,0,0,0"
Checked="ChkPlayers_Checked"
Unchecked="ChkPlayers_Checked"/>
                    <CheckBox Style="{StaticResource DotCheckBox}" x:Name="Monuments"
                              
Content="Monuments"
                               IsChecked="True"
Margin="12,0,0,0"
 Checked="Monuments_Checked"
          Unchecked="Monuments_Unchecked"/>
                    <CheckBox Style="{StaticResource DotCheckBox}" x:Name="ChkShops" Content="Shops" Margin="12,0,0,0"
                      Checked="ChkShops_Checked" Unchecked="ChkShops_Checked"/>
                    <Button x:Name="BtnShopSearch" Style="{StaticResource IconButton}" Margin="12,0,0,0"
                    ToolTip="Shop-Suche" Click="BtnShopSearch_Click">
                        <TextBlock FontFamily="Segoe MDL2 Assets" FontSize="16" Text="&#xE721;"/>
                    </Button>
                    <TextBlock Width="80">     </TextBlock>
                    <CheckBox Style="{StaticResource DotCheckBox}" x:Name="ChatAnnounce"
          Content="Event Spawns in Chat"
          IsChecked="True"
          Margin="8,0,0,0"
          Checked="ChatAnnounce_Checked"
          Unchecked="ChatAnnounce_Unchecked"/>
                </StackPanel>

                <Grid x:Name="WebViewHost" Grid.Row="1" Margin="0,0,0,8" ClipToBounds="True"
              Background="{DynamicResource SurfaceAlt}">
                    <Image x:Name="ImgMap" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Canvas x:Name="GridLayer" IsHitTestVisible="False"/>
                    <Canvas x:Name="Overlay"   IsHitTestVisible="True"/>
                </Grid>

                <TextBox x:Name="TxtLog" Grid.Row="2"
                 IsReadOnly="True" TextWrapping="Wrap"
                 VerticalScrollBarVisibility="Auto"/>
            </Grid>
        </Border>
        <Grid Background="#80000000"
          Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibility}}"
          IsHitTestVisible="True"   
            Panel.ZIndex="9999">
            <Border Background="#F2FFFFFF" CornerRadius="8"
                Padding="20" Width="320" HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel>
                    <TextBlock Text="{Binding BusyText}" FontSize="16" FontWeight="SemiBold"
                           TextAlignment="Center" Margin="0,0,0,10"/>
                    <ProgressBar IsIndeterminate="True" Height="6"/>
                </StackPanel>
            </Border>
        </Grid>

        <Grid Background="#80000000"
      Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibility}}"
      IsHitTestVisible="True"
      Panel.ZIndex="9999">
            <Border Background="{DynamicResource AccentDark}" CornerRadius="8" Padding="20"
          Width="320" HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel>
                    <TextBlock Text="{Binding BusyText}" FontSize="16" FontWeight="SemiBold"
                 TextAlignment="Center" Margin="0,0,0,10"/>
                    <ProgressBar IsIndeterminate="True" Height="6"/>
                </StackPanel>
            </Border>
        </Grid>


    </Grid>
</Window>
    
